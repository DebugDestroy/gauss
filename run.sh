#!/bin/bash

# ======================================
# Terrain Navigator - Build & Run Script
# ======================================
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
# 1. –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CMake
# 2. –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É
# 3. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ (—Ñ–∞–π–ª/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./run.sh          # –ó–∞–ø—É—Å–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#   ./run.sh commands # –ó–∞–ø—É—Å–∫ —Å —Ñ–∞–π–ª–æ–º commandsGauss.cmd
# ======================================


set -euo pipefail

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BUILD_DIR="build"
COMMAND_FILE="config/commands/commandsGauss.cmd"
EXEC_PATH="$BUILD_DIR/bin/terrain_navigator"
EXEC_NAME="terrain_navigator"

# --- –¶–≤–µ—Ç–∞ ---
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

error() { echo -e "${RED}ERROR: $1${NC}" >&2; exit 1; }
info() { echo -e "${YELLOW}$1${NC}"; }

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è ---
get_project_root() {
    local script_dir="$(dirname "$(realpath "$0")")"
    while [[ "$script_dir" != "/" ]]; do
        [[ -d "$script_dir/config" ]] && { echo "$script_dir"; return; }
        script_dir="$(dirname "$script_dir")"
    done
    error "–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
}

PROJECT_ROOT="$(get_project_root)"
info "üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_ROOT"

# --- –°–±–æ—Ä–∫–∞ ---
check_and_build() {
    if ! command -v cmake &>/dev/null; then
        error "CMake –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n  Ubuntu: sudo apt install cmake\n  macOS: brew install cmake"
    fi

    if [[ ! -f "$PROJECT_ROOT/$EXEC_PATH" ]]; then
        info "üîß –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
        mkdir -p "$PROJECT_ROOT/$BUILD_DIR"
        cd "$PROJECT_ROOT/$BUILD_DIR"
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build . --parallel $(nproc --all 2>/dev/null || echo 4)
        cd "$PROJECT_ROOT"
    else
        info "‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ —Å–æ–±—Ä–∞–Ω–∞"
    fi
}

# --- –ó–∞–ø—É—Å–∫ ---
run_program() {
    info "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."
    local binary="$PROJECT_ROOT/$EXEC_PATH"
    if [[ $# -gt 0 && "$1" == "commands" ]]; then
        [[ ! -f "$PROJECT_ROOT/$COMMAND_FILE" ]] && error "–§–∞–π–ª –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: $COMMAND_FILE"
        echo -e "1\n$PROJECT_ROOT/$COMMAND_FILE" | "$binary"
    else
        "$binary"
    fi
}

main() {
    check_and_build
    run_program "$@"
}

main "$@"
