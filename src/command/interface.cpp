#include "command/interface.hpp"
#include <iostream>
#include <sstream>

namespace command {

  // –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
    void Interface::showHelp() {
    logger.info("Showing help information");
    
    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø—Ä–∞–≤–∫–∏
    const std::string helpContent = R"(
# Terrain Navigation System

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ª—å–µ—Ñ–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ –î–µ–ª–æ–Ω–µ, –¥–∏–∞–≥—Ä–∞–º–º –í–æ—Ä–æ–Ω–æ–≥–æ –∏ –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π.

## üìå –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –≤—ã—Å–æ—Ç (—Ñ–æ—Ä–º–∞—Ç BMP –∏ GNUPLOT)
- –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–º k-means
- –¢—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—è –î–µ–ª–æ–Ω–µ —Å —É—á–µ—Ç–æ–º –≤—ã—Å–æ—Ç
- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –í–æ—Ä–æ–Ω–æ–≥–æ
- –ü–æ–∏—Å–∫ –ø—É—Ç–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ —É–≥–ª—É –Ω–∞–∫–ª–æ–Ω–∞ —Ç–µ–ª–µ–∂–∫–∏ –∏ –µ–µ —Ä–∞–¥–∏—É—Å–∞
  

## üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã

### –°–ø–æ—Å–æ–± 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
```bash
# –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
chmod +x run.sh

# –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
./run.sh

# –ó–∞–ø—É—Å–∫ —Å —Ñ–∞–π–ª–æ–º –∫–æ–º–∞–Ω–¥ (commandsGauss.cmd)
./run.sh commands
```

### –°–ø–æ—Å–æ–± 2: –° CMake (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
```bash
mkdir build && cd build
cmake .. -DCMAKE_BUILD_TYPE=Release
cmake --build . --parallel $(nproc)

# –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
./run.sh commands
```

## üõ† –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ command.txt)

| –ö–æ–º–∞–Ω–¥–∞              | –ü–∞—Ä–∞–º–µ—Ç—Ä—ã                      | –û–ø–∏—Å–∞–Ω–∏–µ                                                                 |
|----------------------|--------------------------------|--------------------------------------------------------------------------|
| help                 | -                              | –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥                                       |
| init                 | -                              | –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è                                                       |
| g                    | x y sx sy h                    | –°–æ–∑–¥–∞–µ—Ç –≥–∞—É—Å—Å —Å —Ü–µ–Ω—Ç—Ä–æ–º (x,y), —Ä–∞–∑–º–µ—Ä–∞–º–∏ (sx,sy) –∏ –≤—ã—Å–æ—Ç–æ–π h             |
| generate             | -                              | –°–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≥–∞—É—Å—Å—ã –≤ –∏—Ç–æ–≥–æ–≤–æ–µ –ø–æ–ª–µ                        |
| gnuplot              | filename.png                   | –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—è –≤ PNG —Ñ–∞–π–ª                                |
| PlotMetedata         | filename.png                   | –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏                |
| PlotVoronoi          | filename.png                   | –°—Ç—Ä–æ–∏—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –í–æ—Ä–æ–Ω–æ–≥–æ –ø–æ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏                        |
| PlotDelaunay         | filename.png                   | –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—é –î–µ–ª–æ–Ω–µ                                        |
| PlotPath             | filename.png                   | –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ A –∏ B                            |
| bmp_write            | filename.bmp [Full/Binary]     | –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–µ –≤ BMP: Full - –ø–æ–ª–Ω–æ–µ, Binary - –±–∏–Ω–∞—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–µ             |
| bmp_read             | filename.bmp                   | –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–µ –∏–∑ BMP —Ñ–∞–π–ª–∞                                              |
| bin                  | slice [Peaks/Valleys/All]      | –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è: Peaks - —Ç–æ–ª—å–∫–æ –ø–∏–∫–∏, Valleys - –≤–ø–∞–¥–∏–Ω—ã, All - –ø–æ –º–æ–¥—É–ª—é     |
| wave                 | noisy                          | –£–¥–∞–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º ‚â§ noisy –∫–∞–∫ —à—É–º                              |
| k_means              | k                              | –ö–ª–∞—Å—Ç–µ—Ä–∏–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ k –∫–ª–∞—Å—Ç–µ—Ä–æ–≤                                        |
| k_means_kern         | kk                             | –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å —è–¥—Ä–∞–º–∏ —Ä–∞–∑–º–µ—Ä–∞ kk                                        |
| triangulate          | -                              | –°—Ç—Ä–æ–∏—Ç —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—é –î–µ–ª–æ–Ω–µ –ø–æ —Ü–µ–Ω—Ç—Ä–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç                          |
| find_path            | Ax Ay Bx By                    | –ò—â–µ—Ç –ø—É—Ç—å –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ A –∏ B —á–µ—Ä–µ–∑ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—é                         |
| Plot3DPath           | filename.png                   | –°–æ—Ö—Ä–∞–Ω—è–µ—Ç 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—É—Ç—è –≤ PNG —Ñ–∞–π–ª                                |
| plotInteractive3DPath| -                              | –ò–Ω—Ç–µ—Ä–∞–∫—Ç–≤–Ω—ã–π 3D —Ä–µ–∂–∏–º —Å –ø—É—Ç–µ–º                                            |
| end                  | -                              | –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã                                               |


## ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (config.txt)

| –ü–∞—Ä–∞–º–µ—Ç—Ä                     | –ó–Ω–∞—á–µ–Ω–∏–µ                                       | –û–ø–∏—Å–∞–Ω–∏–µ                                                                         |
|------------------------------|------------------------------------------------|----------------------------------------------------------------------------------|
| fieldWidth                   | `fieldWidth`                                   | –®–∏—Ä–∏–Ω–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ–ª—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö                                                  |  
| fieldHeight                  | `fieldHeight`                                  | –í—ã—Å–æ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø–æ–ª—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö                                                  |
| defaultCenterX               | `defaultCenterX`                               | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é              |
| defaultCenterY               | `defaultCenterY`                               | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é              |
| defaultSigmaX                | `defaultSigmaX`                                | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –æ—Å–∏ X –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                     |
| defaultSigmaY                | `defaultSigmaY`                                | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ –æ—Å–∏ Y –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                     |
| defaultHeight                | `defaultHeight`                                | –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≥–∞—É—Å—Å–æ–≤–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                           |
| defaultGnuplot               | `filename_gnuplot.png`                         | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                         |
| defaultPlotMetedata          | `filename_metadata.png`                        | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                  |
| defaultPlotVoronoi           | `filename_voronoi.png`                         | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –í–æ—Ä–æ–Ω–æ–≥–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                 |
| defaultPlotDelaunay          | `filename_delaunay.png`                        | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ –î–µ–ª–æ–Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultPlotPath              | `filename_path.png`                            | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                              |
| defaultWrite                 | `filename_write.bmp`                           | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è BMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                         |
| defaultWriteModeImage        | `writeMode`                                    | –†–µ–∂–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è BMP (Full/Binary) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                  |
| defaultRead                  | `filename_read.bmp`                            | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ BMP-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                           |
| defaultThreshold             | `defaultThreshold`                             | –ü–æ—Ä–æ–≥ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                                   |
| defaultBinMode               | `binMode`                                      | –†–µ–∂–∏–º –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏ (Peaks/Valleys/All) –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                               |
| defaultNoisy                 | `defaultNoisy`                                 | –ü–æ—Ä–æ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultKlaster               | `defaultKlaster`                               | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è k-mean –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                     |
| defaultKlasterKern           | `defaultKlasterKern`                           | –†–∞–∑–º–µ—Ä —è–¥—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                       |
| defaultpointA_x              | `pointA_x`                                     | X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ A –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultpointA_y              | `pointA_y`                                     | Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ A –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultpointB_x              | `pointB_x`                                     | X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ B –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultpointB_y              | `pointB_y`                                     | Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ B –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                                |
| defaultPlot3DPath            | `filename_plot3dpath.png`                      | –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è 3D-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é                           |
| vehicleRadius                | `vehicleRadius`                                | –†–∞–¥–∏—É—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞                                                    |
| maxSideAngle                 | `maxSideAngle`                                 | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞ –≤–±–æ–∫ (–≥—Ä–∞–¥—É—Å—ã)                                        |
| maxUpDownAngle               | `maxUpDownAngle`                               | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ (–≥—Ä–∞–¥—É—Å—ã)                                   |
| logFileNameInterface         | `filename_log_interface.txt`                   | –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞                                                      |
| logFileNameControl           | `filename_log_control.txt`                     | –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è                                                      |
| defaultHelp                  | `/home/log/Gauss/results/docs/help.txt`        | –ü—É—Ç—å –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å help —Ñ–∞–π–ª                                                     |
| FiltrationLogLevelInterface  | `logLevelInterface`                            | –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (TRACE/DEBUG/INFO/WARNING/ERROR/CRITICAL/OFF)     |
| FiltrationLogLevelControl    | `logLevelControl`                              | –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (TRACE/DEBUG/INFO/WARNING/ERROR/CRITICAL/OFF)     |


## ‚ö†Ô∏è –í–∞–∂–Ω–æ
1. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã init
2. –¢–æ—á–∫–∏ A/B –∑–∞–¥–∞—é—Ç—Å—è –≤ config.txt
3. –ú–∞—Ä—à—Ä—É—Ç –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –Ω–µ –≤—Å–µ–≥–¥–∞!
4. –î–ª—è —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—É—Ç–∏, –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±—ã–ª–æ –±–æ–ª—å—à–µ 3
5. –ï—Å–ª–∏ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, —Ç–æ –≤–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É!
6. –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø–∏—à–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
7. –í–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∫–æ–º–∞–Ω–¥, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥
8. –î–ª—è –∫–æ–º–∞–Ω–¥—ã bmp_write –Ω–µ –ø–æ–ª–∞–≥–∞–π—Ç–µ—Å—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
9. –¢–æ—á–∫–∏ A –∏ B –¥–æ–ª–∂–Ω—ã –ø–æ–ø–∞–¥–∞—Ç—å –≤ —Ç—Ä–∏–∞–Ω–≥—É–ª—è—Ü–∏—é
10. –£—Ä–æ–≤–µ–Ω—å "—Ä–∞–≤–Ω–∏–Ω—ã" = 127, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—è –ø–æ –≥–∞—É—Å–∞–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–ª—Å—è —Å –∑–∞–ø–∏—Å—å—é –ø–æ –∫–∞—Ä—Ç–∏–∫–µ
11. –£—Å–ª–æ–≤–∏—è –ø—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç–∏: 1)–ï—Å–ª–∏ —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≤ –ª—é–±–æ–º –ø–∏–∫—Å–µ–ª–µ –ø—É—Ç—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π (–ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–ª–∏ –≤–±–æ–∫) 2) –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø—Ä–µ–ø—è—Ç—Å–≤–∏—è –Ω–∞ —Å—Ä–µ–∑–µ –º–µ–Ω—å—à–µ —Ä–∞–¥–∏—É—Å–∞

## üìú –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ñ–∞–π–ª (–ø—Ä–∏–º–µ—Ä—ã)
1) –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞ Read.bmp
```
init
help
bmp_read results/visualizations/Read.bmp
gnuplot results/visualizations/gnuplot.png
bmp_write results/visualizations/Polew.bmp Full
bin 147 All
bmp_write results/visualizations/Slice.bmp Binary
wave 10
PlotMetedata results/visualizations/Metadata.png
k_means 5
bmp_write results/visualizations/kmeans.bmp Binary
triangulate
PlotVoronoi results/visualizations/Diagramma_Voronova.png
PlotDelaunay results/visualizations/Triangulation_Delone.png
find_path
PlotPath results/visualizations/Path.png
end
```
2) –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –≥–∞—É—Å–æ–≤
```
init
help
g 99 50 25 25 -25
g 50 50 20 20 25
g 200 50 20 20 -25
g 50 200 20 20 25
g 189 180 20 20 -25
generate
gnuplot results/visualizations/gnuplot.png
bmp_write results/visualizations/Pole.bmp Full
bin 147 All
bmp_write results/visualizations/Slice.bmp Binary
wave 10
PlotMetedata results/visualizations/Metadata.png
k_means 10
bmp_write results/visualizations/kmeans.bmp Binary
triangulate
PlotVoronoi results/visualizations/Diagramma_Voronova.png
PlotDelaunay results/visualizations/Triangulation_Delone.png
find_path 60 130 150 135
PlotPath results/visualizations/Path.png
Plot3DPath results/visualizations/Plot3DPath.png
plotInteractive3DPath
end
```

## üìÉÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (–ø—Ä–∏–º–µ—Ä)
```
fieldWidth 250
fieldHeight 250
defaultCenterX 50.0
defaultCenterY 50.0
defaultSigmaX 20.0
defaultSigmaY 20.0
defaultHeight 200.0
defaultGnuplot results/visualizations/Gnuplot.png
defaultPlotMetedata results/visualizations/Metadata.png
defaultPlotVoronoi results/visualizations/Voronoi.png
defaultPlotDelaunay results/visualizations/Delaunay.png
defaultPlotPath results/visualizations/Path.png
defaultWrite results/visualizations/Write.bmp 
defaultWriteModeImage Full
defaultRead results/visualizations/Read.bmp
defaultThreshold 130
defaultBinMode All
defaultNoisy 10
defaultKlaster 5
defaultKlasterKern 5
defaultstartPointX 150.0
defaultstartPointY 150.0
defaultendPointX 160.0
defaultendPointY 160.0
defaultPlot3DPath results/visualizations/Plot3DPath.png
vehicleRadius 1
maxSideAngle 90.0
maxUpDownAngle 90.0
logFileNameInterface var/logs/log_interface.txt
logFileNameControl var/logs/logcontrol.txt
defaultHelp results/help.txt
FiltrationLogLevelInterface INFO
FiltrationLogLevelControl INFO
```

–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: —Å–º. README.md
)";
    // 1. –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    std::cout << helpContent << std::endl;

    // 2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    std::ofstream helpFile(config.defaultHelp);
    
    if (helpFile) {
        helpFile << helpContent;
        logger.info("Help file created successfully at" + config.defaultHelp);
    } else {
        logger.error("Failed to create help file at " + config.defaultHelp);
        std::cerr << "Error: Could not create help file at " + config.defaultHelp << std::endl;
    }
}

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞
    void Interface::processFileCommands(std::ifstream& file) {
        int commandCount = 0;
        
        while (file >> params.command) {
            commandCount++;
            logger.info(std::string("Processing command #") + std::to_string(commandCount) + ": " + params.command);
            
            if (params.command == "help") {
                showHelp();
                continue;
            }
            
            if (params.command == "end") {
                logger.info("Ending the program.");
                break;
            }
            
            if (!processCommand(file, false)) {
                break;
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    void Interface::processKeyboardCommands() {
        
        while (true) {
            const std::string commandshow = R"(Enter the command and its parameters immediately (help, init, g, generate, gnuplot, bmp_write, bmp_read, bin, wave,
             PlotMetedata, PlotVoronoi, PlotDelaunay, PlotPath, k_means, k_means_kern, triangulate, find_path, Plot3DPath, plotInteractive3DPath, end):)";
            std::cout << commandshow;
            std::cin >> params.command;
            std::cout << "\n";
            logger.info(std::string("Received command: ") + params.command);
            
            if (params.command == "help") {
                showHelp();
                continue;
            }
            
            if (params.command == "end") {
                std::cout << "Ending the program" << std::endl;
                logger.info("Ending the program.");
                break;
            }
            
            if (!processCommand(std::cin, true)) {
                break;
            }
        }
    }

    // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è —Ñ–∞–π–ª–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    bool Interface::processCommand(std::istream& input, bool fromKeyboard) {
    std::string line;
    std::string showInfo;
    std::string modeWrite, modeBin;
    
    if (params.command == "init") {
        if (n != 0) {
            std::cout << "The init command has already been called.\nError\n";
            logger.error("Error: Multiple init commands.");
            return false;
        }
        n = 1;
        showInfo = std::string("Initializing field with size: ") + std::to_string(params.fieldWidth) + " x " + std::to_string(params.fieldHeight);
        
        if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
         
        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Field initialized.");
    }
    else if (n != 1) {
        std::cout << "The init command was not used.\nError\n";
        logger.error("Error: The init command was not used.");
        return false;
    }
    else if (params.command == "g") {      
        params.centerX = config.defaultCenterX;
        params.centerY = config.defaultCenterY;
        params.sigmaX = config.defaultSigmaX;
        params.sigmaY = config.defaultSigmaY;
        params.height = config.defaultHeight;

            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.centerX >> params.centerY >> params.sigmaX >> params.sigmaY >> params.height;
      
         showInfo = std::string("Adding Gaussian: x=") + std::to_string(params.centerX) + 
                  ", y=" + std::to_string(params.centerY) + 
                  ", sx=" + std::to_string(params.sigmaX) + 
                  ", sy=" + std::to_string(params.sigmaY) + 
                  ", h=" + std::to_string(params.height);
                  
         if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
        logger.info(showInfo);
        control.Dispetcher(params);
    }
    else if (params.command == "generate") {
        showInfo = "Generating field by summing all Gaussians";
        logger.info(showInfo);
        control.Dispetcher(params);
        if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
        logger.info("Field generation completed");
    }
    else if (params.command == "gnuplot") {
        params.filename = config.defaultGnuplot;

            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;

            showInfo = std::string("Calling gnuplot with filename: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Gnuplot visualization completed");
    }
    else if (params.command == "PlotMetedata") {
        params.filename = config.defaultPlotMetedata;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
            
            showInfo = std::string("Plotting metadata to: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
         
        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Metadata plotting completed");
    }
    else if (params.command == "PlotVoronoi") {
        params.filename = config.defaultPlotVoronoi;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
            
        showInfo = std::string("Plotting Voronoi diagram to: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }        

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Voronoi diagram plotting completed");
    }
    else if (params.command == "PlotDelaunay") {
        params.filename = config.defaultPlotDelaunay;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
             
        showInfo = std::string("Plotting Delaunay triangulation to: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Delaunay triangulation plotting completed");
    }
    else if (params.command == "PlotPath") {
        params.filename = config.defaultPlotPath;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
             
        showInfo = std::string("Plotting path to: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Path plotting completed");
    }
    else if (params.command == "bmp_write") {
        params.filename = config.defaultWrite;
        modeWrite = config.defaultWriteModeImage;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename >> modeWrite;
         
        if (modeWrite == "Full") {
            params.bmpWriteMode = io::BmpWriteMode::Full;
        } else {
            params.bmpWriteMode = io::BmpWriteMode::Binary;
        }
                    
        showInfo = std::string("Writing BMP file: ") + params.filename + " with mode: " + modeWrite;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("BMP writing completed");
    }
    else if (params.command == "bmp_read") {
        params.filename = config.defaultRead;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
            
        showInfo = std::string("Reading BMP file: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("BMP reading completed");
    }
    else if (params.command == "bin") {
        params.threshold = config.defaultThreshold;
        modeBin = config.defaultBinMode;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.threshold >> modeBin;

        if (modeBin == "Peaks") {
            params.thresholdMode = algorithms::components::ThresholdMode::Peaks;
        } else if (modeBin == "Valleys") {
            params.thresholdMode = algorithms::components::ThresholdMode::Valleys;
        } else {
            params.thresholdMode = algorithms::components::ThresholdMode::All;
        }
                  
        showInfo = std::string("Applying binary filter with slice: ") + std::to_string(params.threshold) + " and mode: " + modeBin;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
        
        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Binary filtering completed");
    }
    else if (params.command == "wave") {
        params.noiseLevel = config.defaultNoisy;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.noiseLevel;
                  
        showInfo = std::string("Applying wave filter with noisy level: ") + std::to_string(params.noiseLevel);
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info(std::string("Wave filtering completed. Components count: ") + 
                   std::to_string(control.componenti.size()));
    }
    else if (params.command == "k_means") {
        params.clusterCount = config.defaultKlaster;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.clusterCount;
                  
        showInfo = std::string("Running k-means with k: ") + std::to_string(params.clusterCount);
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("k-means clustering completed");
    }
    else if (params.command == "k_means_kern") {
        params.kernelSize = config.defaultKlasterKern;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.kernelSize;
                  
        showInfo = std::string("Running k-means with kernel size: ") + std::to_string(params.kernelSize);
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("k-means with kernels completed");
    }
    else if (params.command == "triangulate") {              
        showInfo = "Starting Delaunay triangulation";
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
         
        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Delaunay triangulation completed");
    }
    else if (params.command == "find_path") {
        params.startPointX = config.defaultstartPointX;
        params.startPointY = config.defaultstartPointY;
        params.endPointX = config.defaultendPointX;
        params.endPointY = config.defaultendPointY;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.startPointX >> params.startPointY >> params.endPointX >> params.endPointY;
            
        showInfo = std::string("Finding path from (") + std::to_string(params.startPointX) + "," + 
                   std::to_string(params.startPointY) + ") to (" + 
                   std::to_string(params.endPointX) + "," + 
                   std::to_string(params.endPointY) + ")";
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Path finding completed");
    }
    else if (params.command == "Plot3DPath") {
        params.filename = config.defaultPlot3DPath;
        
            std::getline(input, line);
            std::istringstream iss(line);
            iss >> params.filename;
            
        showInfo = std::string("Plotting 3D path to: ") + params.filename;
            
            if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }

        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("3D path plotting completed");
    }
    else if (params.command == "plotInteractive3DPath") {
        showInfo = "Starting interactive 3D path visualization";
        
        if (fromKeyboard) {
            std::cout << "\n";
            std::cout << showInfo << std::endl;
         }
         
        logger.info(showInfo);
        control.Dispetcher(params);
        logger.info("Interactive 3D visualization completed");
    }
    else {
        std::cout << "Unknown command: " << params.command << std::endl;
        logger.warning(std::string("Unknown command received: ") + params.command);
        return false;
    }
    
    return true;
}

    Interface::Interface(core::Config& cfg, core::Logger& log, Control& c) 
        : config(cfg), logger(log), control(c) {
        logger.info("Interface initialized");
        logger.debug(std::string("Field dimensions: ") + std::to_string(config.fieldWidth) + 
                   "x" + std::to_string(config.fieldHeight));
        
        params.fieldWidth = config.fieldWidth;
        params.fieldHeight = config.fieldHeight;
    }
    
    void Interface::print() {
        logger.info("Starting user interface");
        
        bool useFileInput;
        std::string commandfilename;
        
        std::cout << "Hello, dear user, this program builds Gaussians.\n"
                  << "Enter commands from a text file (PRESS 1) or from the keyboard (PRESS 0)?" 
                  << std::endl;
        std::cin >> useFileInput;
        
        logger.info(std::string("User chose input method: ") + 
                  std::string(useFileInput ? "file" : "keyboard"));
        
        if (useFileInput) {
            std::cout << "You will enter commands from a text file.\nEnter filename:" << std::endl;
            std::cin >> commandfilename;
            
            logger.info(std::string("Attempting to open command file: ") + commandfilename);
            std::ifstream file(commandfilename);
            
            if (!file) {
                logger.error(std::string("Failed to open command file: ") + commandfilename);
                std::cout << "File not found" << std::endl;
                return;
            }
            
            processFileCommands(file);
            file.close();
            logger.info("Closed input file.");
        } else {
            logger.info("User selected keyboard input mode");
            std::cout << "You will enter commands from the keyboard" << std::endl;
            processKeyboardCommands();
        }
    }
}
